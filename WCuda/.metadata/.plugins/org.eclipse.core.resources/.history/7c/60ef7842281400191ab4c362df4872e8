#include "Slice.h"

#include <iostream>
#include <assert.h>

#include "Device.h"

using std::cout;
using std::endl;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

extern __global__ void reductionIntraThreadSlice(float* tabGM,int nbSlice);

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Constructeur			*|
 \*-------------------------------------*/

Slice::Slice(const Grid& grid, int nbSlice, float* ptrPiHat) :
	ptrPiHat(ptrPiHat), nbSlice(nbSlice)
    {
    this->sizeGM = sizeof(float); // [octet]

    // MM
	{
	// TODO SliceNaif
	Device::malloc(&ptrResultGM,sizeGM)) ;
	Device::memclear(ptrResultGM,sizeGM)) ;
	}

    // Grid
	{
	this->dg = grid.dg;
	this->db = grid.db;
	}
    }

SliceNaif::~SliceNaif(void)
    {
    //MM (device free)
	{
	// TODO SliceNaif
	Device::free(ptrResultGM);
	}
    }

/*--------------------------------------*\
 |*		Methode			*|
 \*-------------------------------------*/

void Slice::run()
    {

    reductionIntraThreadSlice<<<dg,db, >>>(tabGM, nbSlice);// assynchrone
    int moitier = nTabGM / 2;
    while (moitier >= 1)
	{
	ecrasementGM<<<dg,db, 1024*sizeof(float)>>>(tab, moitier); //barriere synchronisation implicite
	moitier = moitier / 2;
	}
    Device::memcpyDToH(ptrPiHat, tabGM, sizeof(float));
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
