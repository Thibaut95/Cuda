#include <iostream>
#include <assert.h>

#include "HeatTransfert.h"
#include "Device.h"

#include "IndiceTools_GPU.h"

using std::cout;
using std::endl;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

extern __global__ void heatTransferImageConverter(uchar4* ptrDevPixels, float* ptrTabFloatPixels, uint w, uint h, Calibreur<float> calibreur);
extern __global__ void diffusion(float* ptrDevInput, float* ptrDevOutput, uint w, uint h);
extern __global__ void ecrasement(float* ptrDevHeater, float* ptrDevOutput, uint w, uint h);

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*-------------------------*\
 |*	Constructeur	    *|
 \*-------------------------*/

HeatTransfert::HeatTransfert(const Grid& grid, uint w, uint h, const DomaineMath& domaineMath, int nMin, int nMax) :
	Animable_I<uchar4>(grid, w, h, "HeatTransfert_Cuda_RGBA_uchar4", domaineMath), variateurT(Interval<int>(nMin, nMax), 1)
    {
    // Inputs/animation
    this->nMin = nMin;
    this->nMax = nMax;

    // Tools
    this->t = nMin;




    this->ptrTabFloat = new float[w*h];
    for(int i=0;i<w*h;i++)
    {
	ptrTabFloat[i]=0.9;
    }

    this->ptrImageInit = new float[w*h];
    for(int i=0;i<w*h;i++)
    {
	ptrImageInit[i]=0.0;
    }

    int i,j;

    this->ptrImageHeater = new float[w*h];
    for(int k=0;k<w*h;k++)
    {

	IndiceTools::toIJ(k, w, &i, &j);
	if(i>200 && j > 200 && i<600 && j<600)
	    {
	    ptrImageHeater[k]=1.0;
	    }
	else
	    {
	    ptrImageHeater[k]=0.0;
	    }
    }

    this->sizeTabFloat = w * h * sizeof(float);

    Device::malloc(&ptrDevImageA, sizeTabFloat);
    Device::malloc(&ptrDevImageB, sizeTabFloat);

    Device::malloc(&ptrDevTabFloat, sizeTabFloat);
    Device::memcpyHToD(ptrDevTabFloat, ptrTabFloat, sizeTabFloat);
    Device::malloc(&ptrDevImageInit, sizeTabFloat);
    Device::memcpyHToD(ptrDevImageA, ptrImageInit, sizeTabFloat);
    Device::malloc(&ptrDevImageHeater, sizeTabFloat);
    Device::memcpyHToD(ptrDevImageHeater, ptrImageHeater, sizeTabFloat);
//
    ecrasement<<<dg,db>>>(ptrDevImageHeater, ptrDevImageA, w, h);

    }

HeatTransfert::~HeatTransfert()
    {
    // rien
    }

/*-------------------------*\
 |*	Methode		    *|
 \*-------------------------*/

/**
 * Override
 * Call periodicly by the API
 */
void HeatTransfert::process(uchar4* ptrDevPixels, uint w, uint h, const DomaineMath& domaineMath)
    {
    int n = t;

     // TODO Mandelbrot GPU
    // lauch kernel (line 18)

    Interval<float> start(0,1);
    Interval<float> end(0.7,0);
    Calibreur<float> calibreur(start, stop)


    heatTransferImageConverter<<<dg,db>>>(ptrDevPixels, ptrDevImageA, w, h, calibreur);

    }

/**
 * Override
 * Call periodicly by the API
 */
void HeatTransfert::animationStep()
    {
    this->t = variateurT.varierAndGet();
    }

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

